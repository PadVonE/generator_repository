package main

import (
	"context"
	"github.com/{{ .PackageStruct.GitCompanyName}}/envopt"
    "github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"log"
	"net"
	"{{ .PackageStruct.PackageNameForImport}}/healthcheck"
	"{{ .PackageStruct.PackageNameForImport}}/service"
)

const (
	GRPCPort  = "GRPC_PORT"
	GRPCToken = "GRPC_TOKEN"
)

func startServer(service *service.Service) {
	listener, err := net.Listen("tcp", ":"+envopt.GetEnv(GRPCPort))
	if err != nil {
		log.Printf("can't listen TCP port: %s", envopt.GetEnv(GRPCPort))
		log.Println("error: ", err)
		return
	}

	server := grpc.NewServer(grpc.UnaryInterceptor(authInterceptor))

	{{ .PackageStruct.PackageName}}.Register{{ .PackageStruct.PackageNameCamel}}ServiceServer(server, service)

	healthService := healthcheck.NewHealthChecker()
	grpc_health_v1.RegisterHealthServer(server, healthService)

	log.Printf("starting gRPC server at: %s", envopt.GetEnv(GRPCPort))

	if err := server.Serve(listener); err != nil {
		log.Printf("can't start gRPC server at: %s", envopt.GetEnv(GRPCPort))
	}
}

func authInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {

	if info.FullMethod != "/proto.HealthServer/Check" {
		return handler(ctx, req)
	}

	md, _ := metadata.FromIncomingContext(ctx)

	tokens, ok := md["access-token"]
	if !ok {
		return nil, status.Error(codes.PermissionDenied, "permission denied")
	}
	if len(tokens) <= 0 {
		return nil, status.Error(codes.PermissionDenied, "permission denied")
	}
	if tokens[0] != envopt.GetEnv(GRPCToken) {
		return nil, status.Error(codes.PermissionDenied, "permission denied")
	}

	return handler(ctx, req)
}

