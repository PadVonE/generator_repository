package main

import (
    "github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/{{ .PackageStruct.GitCompanyName}}/envopt"
	"go.elastic.co/apm/module/apmgrpc"
	"google.golang.org/grpc"
	"log"
	"{{ .PackageStruct.PackageNameForImport}}/service"
	"net"
)

const (
	envGRPCPort = "GRPC_PORT"
)

func startServer(service *service.Service) {
	listener, err := net.Listen("tcp", ":"+envopt.GetEnv(envGRPCPort))
	if err != nil {
		log.Printf("Can't listen TCP port: %s", envopt.GetEnv(envGRPCPort))
		log.Println("Error: ", err)
		return
	}

	server := grpc.NewServer(grpc.UnaryInterceptor(apmgrpc.NewUnaryServerInterceptor()))

	{{ .PackageStruct.PackageName}}.Register{{ .PackageStruct.PackageNameCamel}}ServiceServer(server, service)

	log.Printf("Starting gRPC server at: %s", envopt.GetEnv(envGRPCPort))

	if err := server.Serve(listener); err != nil {
		log.Printf("Can't start gRPC server at: %s", envopt.GetEnv(envGRPCPort))
	}
}
