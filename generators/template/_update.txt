package service

import (
	"context"
	"github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/getsentry/sentry-go"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"{{ .PackageStruct.PackageNameForImport}}/entity"
)

func (s *Service) Update{{ .Name}}(_ context.Context, request *{{ .PackageStruct.PackageName}}.Update{{ .Name}}Request) (*{{ .PackageStruct.PackageName}}.{{ .Name}}, error) {
	update{{ .Name}}, err := s.update{{ .Name}}(request)
	if err != nil {
		sentry.CaptureException(err)
		return nil, status.Error(codes.Internal, "INTERNAL_ERROR")
	}

	return entity.{{ .Name}}ToProto(&update{{ .Name}}), nil
}

func (s *Service) update{{ .Name}}(request *{{ .PackageStruct.PackageName}}.Update{{ .Name}}Request) (entity.{{ .Name}}, error) {
	update{{ .Name}} := entity.UpdateProtoTo{{ .Name}}(request)

	_, err := s.DB.AllCols().ID({{ .NameInSnake}}.Id).Update(&{{ .NameInSnake}})
	if err != nil {
		return update{{ .Name}}, err
	}

	return update{{ .Name}}, err
}
