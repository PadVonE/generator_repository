package service

import (
	"context"
	"github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/getsentry/sentry-go"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"gorm.io/gorm"
	"{{ .PackageStruct.PackageNameForImport}}/entity"
)

func (s *Service) UpdateUser(_ context.Context, request *user_repository.UpdateUserRequest) (*user_repository.User, error) {
	item := entity.UpdateUserProtoTo{{ .Name}}(request)

	if item.Id <= 0 {
		sentry.CaptureException(gorm.ErrMissingWhereClause)
		return nil, status.Error(codes.Internal, "internal error")
	}

	if err := s.DB.Save(&item).Error; err != nil {
		sentry.CaptureException(err)
		return nil, status.Error(codes.Internal, "internal error")
	}

	return entity.{{ .Name}}ToProto(&item), nil
}

