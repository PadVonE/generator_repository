package service

import (
	"context"
	"errors"
	"github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/getsentry/sentry-go"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"gorm.io/gorm"
	"{{ .PackageStruct.PackageNameForImport}}/entity"
{{ .Imports}}
)

func (s *Service) Get{{ .Name}}(_ context.Context, request *{{ .PackageStruct.PackageName}}.Get{{ .Name}}Request) (*{{ .PackageStruct.PackageName}}.{{ .Name}}, error) {
	item := entity.{{ .Name}}{}

	query := s.DB.Model(&item)
	
{{ .ListFilter}}
	err := query.Take(&item).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		sentry.CaptureException(err)
		return nil, status.Error(codes.Internal, "internal error")
	}

	if err != nil && errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, status.Error(codes.NotFound, "no rows")
	}

	return entity.{{ .Name}}ToProto(&item), nil
}

