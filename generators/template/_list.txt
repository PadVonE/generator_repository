package service

import (
	"context"
	"github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/getsentry/sentry-go"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"{{ .PackageStruct.PackageNameForImport}}/entity"
)


func (s *Service) List{{ .Name}}(_ context.Context, request *{{ .PackageStruct.PackageName}}.List{{ .Name}}Request) (*{{ .PackageStruct.PackageName}}.List{{ .Name}}Response, error) {

	list{{ .Name}}, total, err := s.list{{ .Name}}(request)
	if err != nil {
		sentry.CaptureException(err)
		return nil, status.Error(codes.Internal, "INTERNAL_ERROR")
	}

	if total <= 0 {
		return nil, status.Error(codes.NotFound, "NO_ROWS")
	}

	response := &{{ .PackageStruct.PackageName}}.List{{ .Name}}Response{}
	response.Total = int32(total)

	for _, item := range list{{ .Name}} {
		response.Items = append(response.Items, entity.{{ .Name}}ToProto(&item))
	}

	return response, nil
}

func (s *Service) list{{ .Name}}(request *{{ .PackageStruct.PackageName}}.List{{ .Name}}Request) ([]entity.{{ .Name}}, int64, error) {
	var list{{ .Name}} []entity.{{ .Name}}
	query := s.DB.NewSession()

    // TODO Реализовать условия для запросов

	total, err := query.
		Desc("{{ .NameInSnake}}.id").
		Limit(int(request.Limit), int(request.Offset)).FindAndCount(&list{{ .Name}})

	return list{{ .Name}}, total, err
}