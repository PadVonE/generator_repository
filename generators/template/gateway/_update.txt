package service

import (
	"context"
	"gateway-front-admin/models"
	"gateway-front-admin/restapi/operations/admin_gateway_service"
	"github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/getsentry/sentry-go"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func (s *Service) Update{{ .Name}}() admin_gateway_service.Update{{ .Name}}HandlerFunc {
	return func(params admin_gateway_service.Update{{ .Name}}Params) middleware.Responder {
		responder := admin_gateway_service.NewUpdate{{ .Name}}OK()

		response, err := s.update{{ .Name}}(params)
		if err != nil {
			sentry.CaptureException(err)
		}

		return responder.WithPayload(response)
	}
}

func (s *Service) update{{ .Name}}(params admin_gateway_service.Update{{ .Name}}Params) (*models.Update{{ .Name}}Response, error) {
	response := &models.Update{{ .Name}}Response{}
	response.Status = models.StatusOK

	info, ok := s.GetTokenInfo(params.HTTPRequest.Header.Get(xAuthToken))
	if !ok {
		response.Status = models.StatusBADCREDENTIALS
		return response, nil
	}

	if !SliceIsIntersect(info.UserRoles, []string{roleAdmin}) {
		response.Status = models.StatusBADCREDENTIALS
		return response, nil
	}

	get{{ .Name}}Request := {{ .PackageStruct.PackageName}}.Get{{ .Name}}Request{
		Id: params.ID,
	}

	data, err := s.{{ .Name}}Repository.Get{{ .Name}}(context.Background(), &get{{ .Name}}Request)
	if err != nil && status.Code(err) != codes.NotFound {
		response.Status = models.StatusINTERNALERROR
		return response, err
	}

	if err != nil && status.Code(err) == codes.NotFound {
		response.Status = models.StatusNOCONTENT
		return response, nil
	}

	update{{ .Name}}Request := {{ .PackageStruct.PackageName}}.Update{{ .Name}}Request{
		Id:                  data.Id,
		EditedUserId:        info.UserId,
		Name:                params.Body.Name,

	}

	item, err := s.{{ .Name}}Repository.Update{{ .Name}}(context.Background(), &update{{ .Name}}Request)
	if err != nil {
		response.Status = models.StatusINTERNALERROR
		return response, err
	}

	response.Payload.Item = &models.{{ .Name}}{
		ID:                  item.Id,
		CreatedAt:           strfmt.DateTime(item.CreatedAt.AsTime()),
		UpdatedAt:           strfmt.DateTime(item.UpdatedAt.AsTime()),

	}

	return response, nil
}
