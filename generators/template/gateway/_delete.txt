package service

import (
	"context"
	"gateway-front-admin/models"
	"gateway-front-admin/restapi/operations/admin_gateway_service"
	"github.com/{{ .PackageStruct.GitCompanyName}}/{{ .PackageStruct.GitRepositoryName}}"
	"github.com/getsentry/sentry-go"
	"github.com/go-openapi/runtime/middleware"
)

func (s *Service) Delete{{ .Name}}() admin_gateway_service.Delete{{ .Name}}HandlerFunc {
	return func(params admin_gateway_service.Delete{{ .Name}}Params) middleware.Responder {
		responder := admin_gateway_service.NewDelete{{ .Name}}OK()

		response, err := s.delete{{ .Name}}(params)
		if err != nil {
			sentry.CaptureException(err)
		}

		return responder.WithPayload(response)
	}
}

func (s *Service) delete{{ .Name}}(params admin_gateway_service.Delete{{ .Name}}Params) (*models.Delete{{ .Name}}Response, error) {
	response := &models.Delete{{ .Name}}Response{}
	response.Status = models.StatusOK

	info, ok := s.GetTokenInfo(params.HTTPRequest.Header.Get(xAuthToken))
	if !ok {
		response.Status = models.StatusBADCREDENTIALS
		return response, nil
	}

	if !SliceIsIntersect(info.UserRoles, []string{roleAdmin}) {
		response.Status = models.StatusBADCREDENTIALS
		return response, nil
	}

	request := {{ .PackageStruct.PackageName}}.Delete{{ .Name}}Request{
		Id: params.ID,
	}

	if _, err := s.{{ .Name}}Repository.Delete{{ .Name}}(context.Background(), &request); err != nil {
		response.Status = models.StatusINTERNALERROR
		return response, err
	}

	return response, nil
}
